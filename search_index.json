[
["index.html", "Agile Data Science with R A workflow 1 Working without a Workflow 1.1 What this Text is About 1.2 Writing out Loud 1.3 Intended Audience", " Agile Data Science with R A workflow Edwin Thoen 1 Working without a Workflow Not even too long ago, when I was starting my career as a data scientist, I did not really have a workflow. Freshly graduated from an applied statistics master I entered the arena of Dutch business, employed by a small consulting firm. Neither the company I was with, nor the clients I was working for, nor myself had an understanding of what it meant to implement a statistical model or a machine learning method in the real world. Everybody was of course interested in this “Big Data” thing, so it did not take long before we I could start at clients, often without a clear idea what I was going to do. When we finally came to something that looked like a project, I plunged into it. Eager to deliver results quickly I loaded data extracts into R and started to apply all kinds of different models and algorithms on it. Findings ended up in the code comments of the R scripts, scripts that often grew to hundreds or even thousands of lines. To still have somekind of an overview I numbered the scripts serially, but this was about all the system I had. Soon I found myself amidst dozens of scripts and data exports of intermediate results that were no longer reproducible. The R session I was running ad infinitum was sometimes mistakenly closed, or it crashed (which was bound to happen as the memory used grew). I spent hours or even days to recreate the results when this happened. Deadlines were a nightmare, everything I had done so far had to be loaded, joined and compared at the last moment. More often than not, the model results appeared to be different from the indications in the notes I took earlier, with no idea if I was mistaken earlier, I was using the wrong data now, or some other source of error I was not aware of was introduced. Looking back at these times, I had no clue about the importance of a good workflow for doing larger data science projects. I was saved several times when plug was pulled from the project, due to other reasons. If I was expected to bring the results to production then, it would certainly been a painful demasqué. I learned a great deal since these day, both from other people’s insights and from my own experiences. Writing an R package that was shipped to CRAN enforced me to understand the basics of software engineering. Not being able to reproduce crucial results forced me to start thinking about end-to-end research and model building, controlling all the steps along the way. Last year, for the first time, I joined a Scrum team (frontend, backend, ux designer, product owner, second data scientis) to create a machine learning model that we brought to production using the Agile principles. It was an inspiring experience from which I learned a great deal. My colleagues patiently explained the principles of Agile software development and together we discovered what did and did not work for data science. 1.1 What this Text is About All these experiences culminated in the workflow that we are adhering to at work now and that I think is worthwhile sharing. It is heavily based on the principles of Agile software production, hence the title. We have explored which of the concepts from Agile did and did not work for data science and we got hands-on experience in working from these principles in an R project that actually got to production. This text is split into two parts. In the first we will look into the Agile philosophy and some of the methodologies that are closely related to it (chapters 2 and 3). Both will be related to the machine learning context, seeing what we can get from the philosophy (chapter 4) and what an Agile machine learning workflow might look like (chapter 5). The second part is hands on. We will explore how we can leverage the possibilities in the R software system to implement Agile data science. 1.2 Writing out Loud Data science projects can greatly differ from each other. There are so many variables that make each project unique, there are many situations I have not experienced and there are necessarily many possible aspects of data science projects I am not aware of. In this writing I am relating my own experiences to the theory and best practises of Agile software development, to come up with a general workflow. This means that if I were to write this text in isolation I would be “overfitting” the workflow on about the dozen large data science projects I have done. That is why I need your help. I hope many of you will read the first drafts of this book very critically and relate the content to their own experiences. If you find that parts are incomplete or plainly incorrect, please file an issue. Also, anyone who succesfully completes data science projects must have developed an effective workflow for themselves, even when it is not grounded in a widespread theory such as Agile. I am very interested in the best practises you have developed, even when they don’t fit directly in the framework. File an issue with what you would like to add, if we can’t fit it in the text we can always add it as an appendix or a discussion. This text is meant to be a living thing with the objective of documenting a workflow that yields optimal reproducibility, quick shipping of results and high quality code. The more people share their best practises, the closer we get to this objective. Please follow along on this journey and get involved! Finally, I am not a native of English so fixed typos and style improvements are greatly appreciated. 1.3 Intended Audience The title of this text has four components: Agile, data science, R, and workflow. When you are interested in all four, you are obviously at the right place. This text is not for you if you hope to learn about different algorithms and statistical techniques to do machine learning, more knowledgeable people have written many books and articles on those topics. Also you will not learn anything about R programming. The workflow I present is completely separate from the algorithms you choose and the data preparation tools of your preference, as it focuses on code organisation and delivery. When you use python rather than R, you will still find this text valuable. The first part especially, which focuses on workflow only and is tool agnostic. The larger data science projects I was involved with all had the objective of delivering predictions in some way, thereby you can file them under machine learning. I intend to present a generic workflow, that is also applicable to data science projects that have a different type of delivery, such as automated reports and Shiny applications. You might find machine learning a bit overrepresented in the examples and applications. If you think there is still a misfit between your daily data science practice, please let me know. Finally, this text is intended for everybody building a data science product in R. Whether a Shiny app or a complex statistical model, this text should be valuable for you as well. The iterative nature of Agile will make your process more effective and your stakeholders more involved. I contemplated calling it Agile Data Science… instead of Agile Machine Learning… to broaden the scope of the text, but frankly I have only done simple, internal-use Shiny dashboards and not too complex statistical models. Therefore, I will stick to what I know well and only give examples of machine learning. I hope you will have little trouble translating the concepts to you own situation if it is other than machine learning. You are most welcome to do suggestions if you think the text will benefit from expanding to other examples as well. "],
["agile-in-a-nutshell.html", "2 Agile in a Nutshell 2.1 The Origins of Agile 2.2 The Manifesto 2.3 The Twelve Principles", " 2 Agile in a Nutshell 2.1 The Origins of Agile Agile software development is not a specific methodogy, a process, or a prescription how to do your job. Rather it is a set of believes, a philosophy, that should guideline a team developing software in making the best possible decisions. Agile was not created out of thin air, of course, it was very much a reaction of the then ubiquitous approach called Waterfall. In Waterfall large software projects are divided into specific stages, each stage should be completed before the next stage can start. Subsequentially these stages are problem analysis, designing the project, writing the software, testing it and finally implementation and maintenance. Here you can find a clear and neutral introducion into the Waterfall approach. What stands out at Waterfall is delivering complete and faultless software. In order to do so, the centre of gravity of a Waterfall project is the documentation, in which every requirement and aspect of the software is written down meticulously. The underlying conviction is that the software is written faster and is of higher quality when all aspects of it is decided upon upfront. Projects done with the Waterfall method have a major pitfall, however. They can take very long to be completed. The combination of sequentiality and completeness might cause projects to last many years before they get delivered. Each time an error or incompleteness is found in one of the lower stages, the project moves back to the previous stage to fix it. Because of the long duration of the entire process of Waterfall it occured often that the end result was no longer a good fit for the ever changiin market. This that once the product is finally completed, it is no longer a good fit for the market. The problem analysis might be done years ago and the problem has changed in the meantime. Agile has a radical different appoach to software design, by recognising a number of flaws in Waterfall thinking. First, it is impossible to think through all the aspects of a complex design and architecture before writing a line of code. Software has to grow organically instead of being completely designed upfront. Secondly, customers typically don’t really know what they want from the product, until they start interacting with it. Legally it might be a good idea to have all the aspects checked off before getting to work, but it will not keep the customer satisfied. Finally, customers and stakeholders will loose interest and faith if it takes a long time before the works results any tangible results. 2.2 The Manifesto During the nineties several reactions to the cumbersome Waterfall came to being. A number of influential thinkers in the world of software development started thinking what an alternative to the malfunctioning practises could be. Alternative processes were suggested, such as scrum and Xtreme programming. Eventually, in 2001 a group of seventeen came together in Utah and drew up the Manifesto for Agile Software Development. Their just 68-word-long statement is: We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value: Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan That is, while there is value in the items on the right, we value the items on the left more. If you think “well, that is rather vague”, it is on purpose. It is not a process you should follow or a methodology that prescribes how you should approach software development. Rather, they are core values that guide the development team with the many choices it makes along the way. At every crossroads the option that is most in line with these values should be selected. 2.3 The Twelve Principles The Manifesto was accompanied by a set of twelve principles that flow from the values. They are more applicable than the four values and are thereby the principle guidelines when making choices. They are (numbering added by me): Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. Business people and developers must work together daily throughout the project. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. Working software is the primary measure of progress. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. Continuous attention to technical excellence and good design enhances agility. Simplicity–the art of maximizing the amount of work not done–is essential. The best architectures, requirements, and designs emerge from self-organizing teams. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. "],
["agile-methods.html", "3 Agile Methods 3.1 Scrum 3.2 Kanban 3.3 Scrum vs Kanban", " 3 Agile Methods We learned that Agile is not so much a workflow or a method, but rather a philosophy that should guide us whenever a choice has to be made during the completion of the project. In fact, Agile promotes being critical to strictly following a workflow, we should continously questioning if the way we work makes us optimally follow the Agile values and principles. If this is not the case we should adjust our workflow. This does not mean there are no workflows related to Agile. In fact, a number of workflows are developed by the men (yes, no women were there) who drew up the Agile Manifesto. Following these workflows should make it more likely the team follows the Agile values and principles. Here we look into the two best known; Scrum and Kanban. 3.1 Scrum The most well-known and most-applied workflow is Scrum. Developed in the late eighties and early nineties it is tried and tested methodology. It is no longer just applied in software development, but in the development of many other products as well. Scrum works with sprints, set time units after which a shipeable product should be ready. Most teams use two-week sprints, but it can also be shorter or longer. Teams are completely self-organising, they decide what it will do the next sprint and how they will do it. Tasks to do are gathered on the productlog, they are all formulated such that it is clear how they will add value to the product. These user stories take the form “As I would like to such that I ”. Say that you run a website that sends out newsletter to all its customer, but there is no option for opting out yet. The user story for creating such a functionality could then be “As a subscribed user I would like to be able to opt out for the newsletter such that I only receive information when I want to”. Scrum comes with a set of roles and ceremonies that I will describe below. 3.1.1 Roles A Scrum team has three different roles. The scrum master, its core responsibility is making sure the team will make the sprint goals. To do so, she must have a watchful eye. If the sales manager wants something done and tries to persuade one of the devs at the coffee machine, he is kindly redirected to the product owner to get it on the back log. If some of the team members lack some necessary skills, she will make a plan with them how to acquire them. Also, she will be the organiser and facilitater of the different Scrum meetings. The product owner is responsible for what the product should be. He monitors the needs and desires of the customer, so one of its key responsibilities is stakeholder management. He should know the market and notice when it changes. He decides what the product should look like, by translating feature changes in user stories. Thereby he maintains the product log, ordering the stories in how important they are. Where the product owner decides what should be doen, the team of developers decides how to do it. It is completely self-organising. At the beginning of each sprint it makes an assessment how which stories can be done in the upcoming sprint. Team members usually have different expertises, but the completion of the stories is the responsibility of the entire team. 3.1.2 Ceremonies Four ceremonies (meetings) are part of Scrum cycle. At the beginning of the sprint there is the sprint planning, in which the stories are scoped and the definition of done is determined. During the sprint there is at least one stand-up per day, in which team members quickly share what they are working on and what help they need from each other. When the sprint is done the team organises a sprint review in which it presents what work was completed. Finally, there is the retrospective, in which the team discusses what went well during the last sprint and what can be improved. 3.2 Kanban Kanban is much lighter and less process heavy than Scrum. It does not work with fixed time units, such as the Scrum sprints, but it aims achievin a continuous flow. Just as with Scrum the tasks to do are formulated in user stories, but the commitment is just to one story at a time. Scrum has a rigid commitment to the stories in the sprint, only under very special cirumstances does a team deviate from the sprint. In Kanban stories are gathered on a back log and are continuously ordered in importance. Each time a story is completed the most relevant new story is started. Central is the Kanban board, which can be physical or virtual, that has at least the columns to do, doing, and done, but can be tailored to the wishes of the team. Unlike Scrum there is not official role of Product Owner, still it can be useful to have someone handling the incoming requests. This can be a designated person or a team member who is also doing developing work. The team should not focus on too many tasks at once, everything that is pulled from to do should be worked on and only new stories should be pulled as soon as others have reached done. This assures that the focus is always at the most important task ahead and there is not too much multitasking. A team can even choose to set a cap on the number of stories that can be in each column. The central metric is the amount of time it typically takes to complete a task, the cycle time. Effective Kanban teams have short cycle times, they are able to complete the tasks quickly. They can give estimates when work is done with confidence. Just as with Scrum the entire team is responsible for completing a story, not just the “designated” person for the job. In order to have the tasks completed as quickly as possible team members might fulfill tasks now and then that are a little bit out of their comfort zone. 3.3 Scrum vs Kanban The higlhly structured Scrum and the lightweight Kanban are two workflows that could make a team work more according to the Agile principles. They both aim for continuous shipping of working software instead of working towards one major release. They also both give focus on the part you are working on right now, Scrum by fixing the stories that are done in the sprint, while Kanban limits the number of stories that the team is working on. But there are also some remarkable differences. Scrum the team commits to the stories it selected to do this sprint and the building have to be on fire before it will take on work that is not in the sprint. Kanban only prescribes to limit the number of stories that are in work in progress, finish what you start first than start something new. However, for the story to do next everything can change at any moment. Scrum is quite heavy on the ceremonies, shile Kanban does not prescribe recurrent meetings. Both methodologies are applied with great success and its important to keep in mind that they are means to an end, no religions. The Agile values and principles should be the primary guideline and when selecting one of the workflows you do so because it is the best way to work in a Agile way in the team’s situation. The team should decide for itself what is the best way of working and should be monitor if the choice is still the best as the situation changes. In general, however, it makes more sense to use Scrum when a team is working on the completion of a project, whereas the flexibility of Kanban is best suited for a service team that is dealing with a lot of incoming requests. Sources: https://www.youtube.com/watch?v=2Vt7Ik8Ublw https://agilescrumgroup.nl/product-owner-rol-taken/ https://www.atlassian.com/agile/kanban/ https://agileknowhow.com/2018/03/01/do-we-need-a-product-owner-with-kanban/ "],
["agile-machine-learning.html", "4 Agile Machine Learning 4.1 Machine Learning’s Waterfall 4.2 The Twelve Principle in the Machine Learning Context", " 4 Agile Machine Learning 4.1 Machine Learning’s Waterfall As discussed in the previous chapter, Agile is a response to Waterfall methodology that was widely adopted in the eighties and nineties. Many projects following this methodology failed because the long duration of these projects. The world had moved on while the process-heavy steps were completed and either the plug was pulled before the product was finished or the finished product had limited value because it was a misfit to the changed world. In machine learning, as far as I am aware of, there are no such formal methodologies that are followed by many practioners. However, there are ample testimonies of projects that never reached production and I think this is partially due to suboptimal workflow. Just like Waterfall, machine learning projects can take many months or even years before the results are productionised or the plug is pulled. The data scientist might want to optimise many asprects of the project to give the best predictions possible, before sharing the results with stakeholders. The code might be poorly organised, leading to a lot of time lost merging differenct scripts. Or there might be unclarities on what to predict in the first place, due to lack of communication between stakeholders, business people and data scientist. Whatever the reason, adhering to the principles of Agile can get you more productive and efficient. Here we take the time to interpret the twelve principles in the machine learning context. 4.2 The Twelve Principle in the Machine Learning Context Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. Just as Waterfall prescribes a complete and fault-free product delivered at once, data scientists might be inclined to only release a machine learning model to production once they are confident its predictions are spot on. This principle is a revolutionary break from Waterfall, you should not wait with releasing software until its perfect, instead get it out in the open when it is just good enough. A common term used for this is the MVP (Minimal Viable Product). After the MVP is released it is closely monitored how users are interacting with it and where the biggest room for improvement is. The biggest possible improvement is then tackled first and a new version is released. This cycle of release, monitor, improve, release is repeated many times, such that the product gets better and better. There is no clear definition of done, instead there is debate if the software can be further improved and if the required investments are worth the effort. The machine learning equivalent to this would be a Minimal Viable Model, a model that is just good enough to put into action. This might be scary and counterintuitive to the high standards you have for yourself, but it is preferable over long optimisation before releasing for at least the following reasons: It will keep stakeholders excited. Managers and users of the model who commisioned the machine learning project are impatient to see results. As the projects drags on without any output they are likely to loose interest and confidence the project will end well. Eventually they might pull the plug or put it on hold before anything reached production. If they can interact with the results soon, even if it is imperfect will give a totally different dynamic. You will fail fast. There is a wide array of reasons a machine learning project might fail, such as; the problem appears not be translateable into a model in the first place, the data is not of the quality needed, or the relationship between the features and target. The sooner you implement the model the sooner lurking problems suface. You will get feedback sooner. This is the main reason Agile wants to implement quickly and then iterate. Lets say you build a churn model which the sales department uses for customer retention. As soon as they start acting on your MVM they find out that the interval in which you predict is too short, many customers already canceled their subscription. Instead of further optimising this model, you focus on predicting a longer time ahead. What a MVM looks like is project-dependent of course, but in many cases it would probably make sense to define it a regular statistical measure. The machine learning model might be replacing a business rule that has been in place for many years, the MVM is then ready as soon as the model outperforms the business rule. Another way to build an MVM is by only releasing the model for a subset of your target audience. This might be a certain geographical area or users of a certain age. A model only implemented for a part of the population also makes a great MVM. Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage. This principle comes natural to machine learning, since the outcome of a project is at least partially dependent on the relationships discovered in data. The Waterfall approach in which every step of the project is planned would be appear hideous to even the biggest lover of process. Keep in mind that flexibility should not only be exercised towards assumptions of your data or the models and algorithms you use. Requirements can also be in the framing of the business problem or the way the model predictions are exposed. Whatever it is, don’t be lazy and be prepared to steer in a different direction as soon as the situation requires. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. Whereas the first principle is about the philosophy of early deployment and iteration, this one is about the frequency of deploying updates. The Scrum framework is really strict in the amount of time that can be spent until the next release. The team commits itself to making certain changes to the product in typically a two-week period. At the end of this period the improvements, small as they might be, are deployed. The Scrum mindset is not totally applicable for machine learning, as we will explore in the next chapter. It is typically not feasible to commit to a time interval for model improvent because we simply cannot commit to it. We are dependent on the relationships in the data and we don’t know beforehand if the next road we enter is a dead-end or not. However, it is good to keep in mind that every improvement to the model should be deployed as soon as its ready. This creates momentum and excitement by customers, stakeholders, your teammates and yourself. Business people and developers must work together daily throughout the project. Machine learning cannot be done in isolation by a data scientist. Navigating through the data cannot be done without knowing about the underlying business process, often additional information is needed from business colleagues. Stakeholder management, keeping them informed about the progress and presenting them with important choices. Also, the customer might be business colleagues who should act upon the predictions. Not involving the business is a recipe for disaster for every machine learning process. Within the Scrum methodology the role of Product Owner is crucial for the allignment of the team with the business. Having such a representative is also very welcome for a machine learning project, he or she is than the translater between the modelling and the business. Keeping this person informed at all times is essential for decision making. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. This principle is the antithesis of Waterfall in optima forma. Instead of meticuously describing how the job should be done, just set the goals of the projects and leave it up to the team how these goals should be attainted. Machine learning practioneers typically already enjoy this type of freedom for the sheer reason that stakeholders often don’t really understand how the predictions are done. It can happen that business people get overly involved in the process, they can have a strong opinion on which targets should be used or how the target should be defined. Take their advice at heart but trust your instincts. If you feel a different approach will yield better results than rely on your expertise. You know about overfitting, multicollinearity, non-convergin algorithms and many other topics the business cannot grasp. Take the time to explain why you think a different approach is better (in lay men terms of course) and thank them for their input. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. A machine learning project is rarely done end-to-end by one single person. Data might be made available by a dba, a backender might expose the model results within the website, the frontender builds the interface for interacting with the results, etc. If possible working with these people directly will speed up decision making and improve allignment. Communication by email or chat programs are often slow and lack the interaction. Make an effort to be in the same room with your direct colleagues, for at least a part of the project time. Working software is the primary measure of progress. As long it is not part of the modelling pipeline you have not reached any results yet. Only when the update to the predictions is fully implemented and the predictions are ready to be consumed by the business, there has been true improvement. All too often the reported improvement in accuracy in research scripts does not hold when it is implemented in the full model pipeline. Sometimes it has been done on just a subset of the data that was conveniently available. Or the new feature was tested in isolation and there is not yet a sense of multicollinearity. There is only one true measure of how well we are currently doing, and it is the pipeline. This implies that as long as there is not end-to-end pipeline in place, we cannot tell how well we are doing. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. The deadline way of doing a machine learning project; the stakeholders and the developers meet, they set to have a first version of the model ready at a set moment in the future. The sponsors forget about the project until right before the deadline, busy with meetings and memos. The devdeloper goes to work, having ample time before the deadline there are many things that can be explored. The result is an array of research scripts and intermediate results. Suddenly, as the deadline comes near, all this separate research has to come together. Pulling an all nigther the team is able to deliver a result, which is presented to the sponsors. The project is then continued, a new deadline is set, and the cycle starts over. Don’t - do - deadlines. They are a recipe for hastily created, nonreproducible results. They promote a workflow of taking it easy at first, stressing out when the dealine comes near and exhaustion after it. Instead set small goals that are attainable in a short timespan, update the model if its results are favorable and set a new small goal. This will result in better quality code, a better grip on the model results and a happier team. Moreover, it will result in a model that is constantly updated, which excites sponsors and users. Continuous attention to technical excellence and good design enhances agility. Machine learners can have much to learn from software engineers as it comes to standards and rigor. In machine learning much of the code that is used to produce the predictions is not shipped as part of the product. Cleaning of the train data, splitting in train and validation sets, running algorithms that produce the models, doing research on relationships in the data and many more steps are for the machine learning practioneer’s eyes only. It is tempting to cut corners when you are the sole user of your own code. Why go to the trouble of writing unit tests and documentation for your functions, as soon it does not do what it is supposed to do you are right there to fix it. At the moment of writing your code it is very obvious what is supposed to do and as you run the code against the data you are then working with it is straightforward to see if the program indeed does what it supposed to do. However, three months from know you completely forgot the reason you wrote that part and you have no clue why it failed against the refreshed data. You never work alone on a project, even if you are the only person working on it. Always consider future you as a separate person who you respect very much and you want to help to do its job as good as possible. The result of many parts of code of poor quality is that they don’t click to make the bigger, complex system that large machnine learning projects are. Trying to create this system to produce final predictions is then a bit like … Each time you fix one part another part comes tumbling down. To produce reproducible, reliable predictions it is essential you can completely trust the code you wrote. Simplicity–the art of maximizing the amount of work not done–is essential. A machine learning project’s goal is often straightforward, predict y as best you can such that some business goals can be achieved. Other than software development there is not much to choose in which features should and should not be included in the final product (features as in characteristics, not as in predictors). The options how to arrive at predicting y, however, are abundant. The biggest challenge is often “what should I explore next?”. Should we explore another database in which we might find new predictors or should we try a different model on the current predictors which involves some additional preprocessing of the data? We can roughly estimate what the amount of work would be to explore both options, it is, however, very hard to predict what the amount of value is the new part will add. A good rule of thumb is that when in doubt choose the option with the least unknown components. Choose an algorithm you know well over one you have never used in practise. Only tap into a new data source if you are convinced that the options on the current data base are exhausted. Machine learning is a field with rapid developments, it is often tempting to seize the opportunity to dive into a new technique or algorithm. Be critical before doing so, is there really no way to obtain similar results with something already familiar to you? The best architectures, requirements, and designs emerge from self-organizing teams. This is another principle that is a clear antidote to Waterfall. Instead meticulously plan every aspect of the project upfront, let the developers come up with the most important project designs as they go. It is impossible to foresee all the aspects of the software project before implementing it, so trying to come up with before writing code is a guarantee for going back and forth between the planning and implementation stages. Due to the iterative nature of building predictive models and the insecurity we have on the relationships in the data, this principle seems quite natural in the machine learning context. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. In the Scrum methodology a retrospective is done after two week sprint. The team discusses what went well in the past sprint and what deserves attention. Every development process has its inefficiencies, wether they are unclear communication or not havring the right priorities. Having to reflect on the process forces you to look critically at all aspects of the project. Inefficiencies can quickly become project features when they exist for a while, the sooner they are tackled the better. Even when you are not in a team following an official methodology such as Scrum or Kanban, you do best in planning regular reflection meetings. Even when you are the only data scientist or even the only development of the team, you should also your technical issues here. Maybe you are wanting to refactor a certain part of the project for a while but are unsure if it is worth the time. Even though your business colleagues don’t understand the technical aspect of the problem, they can still challenge you on the pros and cons of both sides. We have reflected on the twelve priniciples with machine learning in mind. Some principles appear to be not too interesting for us, but many can be a great guide in delivering results quicker and with more joy and confidence. In the last chapter we briefly discussed the methodologies Scrum and Kanban. Now it is time to see what an Agile methodology for machine learning migh look like. We are going to explor this in the next chapter. "],
["a-methodology-for-agile-machine-learning.html", "5 A Methodology for Agile Machine Learning 5.1 Linear and Circular Tasks 5.2 A Two-Way Model for Development 5.3 User Stories 5.4 Using Kanban for Machine Learning 5.5 Scoping Tasks 5.6 The Product Owner Role 5.7 Monitoring the Process", " 5 A Methodology for Agile Machine Learning Now we have interpreted the Twelve Agile Principles in the Agile setting we can explore what an Agile machine learning workflow might look like. Let us remind ourselves that the workflow is always a means to an end. The Agile values and principles are the guidelines and the workflow should serve following the principles the best you can. If at any moment in a project the team feels the workflow is no longer the optimal way to make decisions in an Agile way, it should change it. Therefore, this chapter should be considered as nothing more than an exploration, a bunch of thoughts. If it does not work for you for whatever reason, by all means find a better way. 5.1 Linear and Circular Tasks The tasks in Agile software development are what I call linear tasks. They come from feature requets by stakeholders to the product, collected by the product owner. The outcome is envisioned and captured in a user story. The team translates it into the technical tasks and starts working on it. Both Scrum and Kanban do not prescribe the steps a task should go through, but it typically looks like the following. Figure 5.1: Linear flow in software development These type of tasks lend themselves well for scoping and committing oneself to what the product will look like in a few weeks time, as is done in Scrum. Machine learning tasks to improve a model are what I call circular tasks. The starting position is the latest version of the model. If one has not yet a good idea how to further improve the model we would typically do an explorative analysis. From this a hypothesis can be generated of how the model might be improved, which is subsequently tested. Next we can evaluate if we want to change the model based on the hypothesis tested. If so we update the model, if not we start a new cycle. Figure 5.2: Circular flow in machine learning Machine learning projects typically also encompass linear tasks, such as setting up a pipeline to import the data and do basic data wrangling or exposing the model results in an API. However, the circular nature of the modelling part of the project makes the highly structured Scrum method unfit for machine learning. We simply cannot guarantee that the model will be updated in two weeks time, because we don’t know if the hypotheses we are going to test will give us anything that will improve the model. Moreover, during the completion of a task we can generate new hypotheses that seem more relevant than the one we originally had scheduled to do after this task. If we had commited to a set of tasks for a fixed time period from which we cannot deviate, we are slowed down because we cannot directly act on newly gained insights. The flow oriented Kanban seems a better fit for machine learning projects because, just as software service teams, the most relevant thing to do next often changes at the last moment. 5.2 A Two-Way Model for Development With presenting the circular workflow of machine learning I got a little bit ahead of myself, it asumes that we work with a two-way structure that is presented here. This workflow makes a hard cut between the model pipeline and exploratory research. The latter always contains the best possible model we can build based on our current knowledge. It is standalone, which means that it contains all the steps to go from source data to exposing the predictions. It should be high quality software so we can rely on it. This will make the model completely reproducible and automatable, the two requirements for continuous delivery of model results. In order to improve our model we do exploratory research, which can be anything that the machine learning researcher can think of. Exploratory research will greatly benefit from having an organised model pipeline, because it will make intermediate results on which to explore quickly available. In order to test hypotheses quickly, exploration scripts can be interactive analyses without software requirements or even being reproducible in later stages. They should quickly give an indication if the model can be improved by the alteration propesed by the hypothesis. 5.3 User Stories In both Scrum and Kanban the tasks ahead are formulated in user stories, clearly stating what the benefit of the customer will be once the user story is completed. This will retain focus on delivering customer value with everything you do. Also the work in a large machine learning project can be chunked up, but it is sometimes difficult and often futile to formulate the task ahead in the shape of user stories. In software development there is an abundance of ways to change the product as it currently is. We could leave everything the way it is, but change this one little thing that will improve user experience. Say, giving one extra option at a dropdown or siging up for a news letter. In machine learning the final product is just a bunch of predictions and the many options you have to improve the model will almost all have the goal of improving those predictions. If you try to define a user story it will always go “As the I want to have the best possible preditctions, such that ”. It does make sense, though, to create an overarching user story for the entire project. This will enforce the team and the stakeholders to think of the application of the model. All too often machine learning projects are initiated with an explorative nature, to “see if there is anything in the data”. If the group does not manage to formulate a proper user story for the project, there is probably no good application for the model and you should not start exploring in the first place. 5.4 Using Kanban for Machine Learning We have concluded that Scrum is too rigid for machine learning because the explorative nature of data analysis is not suitable for the tight planning of deliverables in Scrum. Kanban on the other hand gives us the flexibility to change the next task we are taken upon ourselves. Within a two-way model for doing machine learning there is the model pipeline that has to be good quality and there is the explorative research in which you can do whatever to come to quick conclusions about the hypothesis tested. It appears that the linear tasks of software design are a match with the model pipeline, whereas the circular tasks are applicable to the exploratory research. Weaving these finds together results in a Kanban workflow with at least the columns to do, doing, and done. Hypotheses to be tested are gathered in the to do column, as well as the planned work on the pipeline. This is the backlog that is ordered, so it is clear what to do next. Kanban gives focus, finishing one task at a time. Too often when doing machine learning we have interesting finds on which we jump right away without finishing what we were doing. To prevent that, just add the new find as an hypothesis to the board. This will make sure that the tasks that are currently in doing always get completed first, and that after each completion there is a moment where can be decided what is the most urgent change to the pipeline or the most promising hypothesis to explore. As a rule of thumb, never work on more tasks than that there are data science members on the team simultaneously. Tasks are either software or research tasks, which directly indicate which requirements there are to the completion of the task. If the research task results in a proposed model update, the update captured in a newly formed software task (which can be placed on top of the to do list right away). 5.5 Scoping Tasks Scrum uses story points to scope its stories. The team itself determines the number of points awarded to each story, it does so in the sprint planning session. The team knows how many story points it typically completes in a sprint, so after scoping the sprint can be planned by selecting stories such that the total of their points does not exceed the team’s capacity. Kanban does not scope stories. In fact, the average time of taks completion is Kanban’s key metric of effectiveness. When doing machine learning with Kanban it might still be valuable to scope the tasks ahead, especially for exploring hypotheses. One of the major pitfalls of trying to improve a model is endless exploration of a hypothesis. We like to have one more look from this other angle, or maybe this new fancy algorithm that you are anxious to test for a while will give a major boost. Data scientists are typically assiduous by nature, this is what allows them to master a wide range of dificult topics from statistics to programming. This could lead to stubbornes, however, unwilling to give up what was thought the way to get a major improvement. Scoping for machine learning is then not just estimating how long a task will take to complete, it is also time boxing. If used in this way, the scoping should be done in time units, not a subjective measure such as story points. The data scientist should not take longer for the task than the team agreed, wrapping up even when he does not feel completely fihished. If he found an alleyway that is still worthwhile exploring a new task should be put in the backlog, instead preservering in the current task. Scoping also helps with prioritising. If there are several candidate tasks to do next, the one with the least time to complete might be best done first. 5.6 The Product Owner Role When doing software development with Kanban there is typically a product owner involved. She aligns with customers and stakeholders, and adds the feature requests to the to do column of the board. When doing machine learning, it can also desirable to have someone else than the data scientist doing stakeholder management and communication of the model results. This will free up time and energy for model development. Gathering the tasks to do cannot be primarily lay at the product owner. The data scientist typically draws up the hypotheses for improving the model, since this is part of the machine learning and requires advanced knowledge of modelling. Of course the product owner can come up with suggestions for model improvement, especially when she has advanced knowledge of the business or on the availble data. You should discuss the tasks you put on the Kanban board with the product owner, even when their technical. This will demistify the model building and makes sure she can do a better job explaining the work to stakeholders. Especially when you are the sole data scientist on the project she also needs to get involved in prioritizing and scoping. Discussing how much time it will cost to complete the task and what it would bring can lead you to more accurate estimates of the time and value of the task. Also, the product owner might raise concerns from the business side that you did not think about, leading to a different prioritisation. 5.7 Monitoring the Process Reflecting on your workflow is a key element of Agile. Are you still continuously delivering? Are you still aligned with the business? Is there a better way of scoping tasks then you are doing now? How you reflect on this is also you have to find out for yourself as a team, but it might make sense to use the biweekly rythm of Scrum. You might combine it with scoping tasks that were put on the board the lately and reprioritizing your work. "]
]
