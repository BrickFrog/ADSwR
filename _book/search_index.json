[
["a-methodology-for-agile-machine-learning.html", "5 A Methodology for Agile Machine Learning 5.1 Linear and Circular Tasks 5.2 A Two-Way Model for Development 5.3 User Stories 5.4 Scoping tasks", " 5 A Methodology for Agile Machine Learning Now we have interpreted the Twelve Agile Principles in the Agile setting we can explore what an Agile machine learning workflow might look like. Let us remind ourselves that the workflow is always a means to an end. The Agile values and principles are the guidelines and the workflow should serve following the principles the best you can. If at any moment in a project the team feels the workflow is no longer the optimal way to make decisions in an Agile way, it should change it. Therefore, this chapter should be considered as nothing more than an exploration, a bunch of thoughts. If it does not work for you for whatever reason, by all means find a better way. 5.1 Linear and Circular Tasks The tasks in Agile software development are what I call linear tasks. They come from feature requets by stakeholders to the product, collected by the product owner. The outcome is envisioned and captured in a user story. The team translates it into the technical tasks and starts working on it. Both Scrum and Kanban do not prescribe the steps a task should go through, but it typically looks like the following. Figure 5.1: Linear flow in software development These type of tasks lend themselves well for scoping and committing oneself to what the product will look like in a few weeks time, as is done in Scrum. Machine learning tasks to improve a model are what I call circular tasks. The starting position is the latest version of the model. If one has not yet a good idea how to further improve the model we would typically do an explorative analysis. From this a hypothesis can be generated of how the model might be improved, which is subsequently tested. Next we can evaluate if we want to change the model based on the hypothesis tested. If so we update the model, if not we start a new cycle. Figure 5.2: Circular flow in machine learning Machine learning projects typically also encompass linear tasks, such as setting up a pipeline to import the data and do basic data wrangling or exposing the model results in an API. However, the circular nature of the modelling part of the project makes the highly structured Scrum method unfit for machine learning. We simply cannot guarantee that the model will be updated in two weeks time, because we don’t know if the hypotheses we are going to test will give us anything that will improve the model. Moreover, during the completion of a task we can generate new hypotheses that seem more relevant than the one we originally had scheduled to do after this task. If we had commited to a set of tasks for a fixed time period from which we cannot deviate, we are slowed down because we cannot directly act on newly gained insights. The flow oriented Kanban seems a better fit for machine learning projects because, just as software service teams, the most relevant thing to do next often changes at the last moment. 5.2 A Two-Way Model for Development With presenting the circular workflow of machine learning I got a little bit ahead of myself, it asumes that we work with a two-way structure that is presented here. This workflow makes a hard cut between the model pipeline and exploratory research. The latter always contains the best possible model we can build based on our current knowledge. It is standalone, which means that it contains all the steps to go from source data to exposing the predictions. It should be high quality software so we can rely on it. This will make the model completely reproducible and automatable, the two requirements for continuous delivery of model results. In order to improve our model we do exploratory research, which can be anything that the machine learning researcher can think of. Exploratory research will greatly benefit from having an organised model pipeline, because it will make intermediate results on which to explore quickly available. In order to test hypotheses quickly, exploration scripts can be interactive analyses without software requirements or even being reproducible in later stages. They should quickly give an indication if the model can be improved 5.3 User Stories In both Scrum and Kanban the tasks ahead are formulated in user stories, clearly stating what the benefit of the customer will be once the user story is completed. This will retain focus on delivering customer value with everything you do. Also the work in a large machine learning project can be chunked up, but it is sometimes difficult and often futile to formulate the task ahead in the shape of user stories. In software development there is an abundance of ways to change the product as it currently is. We could leave everything the way it is, but change this one little thing that will improve user experience. Say, giving one extra option at a dropdown or siging up for a news letter. In machine learning the final product is just a bunch of predictions and the many options you have to improve the model will almost all have the goal of improving those predictions. If you try to define a user story it will always go “As the I want to have the best possible preditctions, such that ”. It does make sense, though, to create an overarching user story for the entire project. This will enforce the team and the stakeholders to think of the application of the model. All too often machine learning projects are initiated with an explorative nature, to “see if there is anything in the data”. If the group does not manage to formulate a proper user story for the project, there is probably no good application for the model and you should not start exploring in the first place. 5.4 Scoping tasks "]
]
